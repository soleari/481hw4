Found 69 issues

src/main/java/org/jfree/data/xml/DatasetReader.java:73: error: RESOURCE_LEAK
  resource of type `java.io.FileInputStream` acquired to `in` by call to `FileInputStream(...)` at line 72 is not released after line 73.
  71.           throws IOException {
  72.           InputStream in = new FileInputStream(file);
  73. >         return readPieDatasetFromXML(in);
  74.       }
  75.   

src/main/java/org/jfree/chart/util/CloneUtils.java:97: error: RESOURCE_LEAK
  resource of type `java.util.HashMap` acquired to `result` by call to `put(...)` at line 96 is not released after line 97.
**Note**: potential exception at line 96
  95.                   try {
  96.                       result.put(key, ObjectUtils.clone(value));
  97. >                 } catch (CloneNotSupportedException ex) {
  98.                       throw new RuntimeException(ex);
  99.                   }

src/main/java/org/jfree/data/xml/PieDatasetHandler.java:108: error: NULL_DEREFERENCE
  object returned by `getSubHandlers()` could be null and is dereferenced at line 108.
  106.           else if (qName.equals(ITEM_TAG)) {
  107.               ItemHandler subhandler = new ItemHandler(this, this);
  108. >             getSubHandlers().push(subhandler);
  109.               subhandler.startElement(namespaceURI, localName, qName, atts);
  110.           }

src/main/java/org/jfree/data/xml/CategoryDatasetHandler.java:109: error: NULL_DEREFERENCE
  object returned by `getSubHandlers()` could be null and is dereferenced at line 109.
  107.           else if (qName.equals(SERIES_TAG)) {
  108.               CategorySeriesHandler subhandler = new CategorySeriesHandler(this);
  109. >             getSubHandlers().push(subhandler);
  110.               subhandler.startElement(namespaceURI, localName, qName, atts);
  111.           }

src/main/java/org/jfree/data/DefaultKeyedValue.java:102: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.DefaultKeyedValue.getValue` reads without synchronization from `&this.org.jfree.data.DefaultKeyedValue.value`. Potentially races with writes in method `void DefaultKeyedValue.setValue(Number)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  100.       @Override
  101.       public Number getValue() {
  102. >         return this.value;
  103.       }
  104.   

src/main/java/org/jfree/data/xml/DatasetReader.java:118: error: RESOURCE_LEAK
  resource of type `java.io.FileInputStream` acquired to `in` by call to `FileInputStream(...)` at line 117 is not released after line 118.
  116.           throws IOException {
  117.           InputStream in = new FileInputStream(file);
  118. >         return readCategoryDatasetFromXML(in);
  119.       }
  120.   

src/main/java/org/jfree/data/DefaultKeyedValue.java:135: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.DefaultKeyedValue.equals` reads without synchronization from `&this.org.jfree.data.DefaultKeyedValue.value`. Potentially races with writes in method `void DefaultKeyedValue.setValue(Number)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  133.           }
  134.           if (this.value != null
  135. >                 ? !this.value.equals(that.value) : that.value != null) {
  136.               return false;
  137.           }

src/main/java/org/jfree/data/DefaultKeyedValue.java:150: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.DefaultKeyedValue.hashCode` reads without synchronization from `&this.org.jfree.data.DefaultKeyedValue.value`. Potentially races with writes in method `void DefaultKeyedValue.setValue(Number)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  148.           int result;
  149.           result = (this.key != null ? this.key.hashCode() : 0);
  150. >         result = 29 * result + (this.value != null ? this.value.hashCode() : 0);
  151.           return result;
  152.       }

src/main/java/org/jfree/chart/text/TextUtils.java:186: error: NULL_DEREFERENCE
  object `lastFragment` last assigned on line 185 could be null and is dereferenced at line 186.
  184.               TextLine lastLine = result.getLastLine();
  185.               TextFragment lastFragment = lastLine.getLastTextFragment();
  186. >             String oldStr = lastFragment.getText();
  187.               String newStr = "...";
  188.               if (oldStr.length() > 3) {

src/main/java/org/jfree/chart/text/TextUtils.java:185: error: NULL_DEREFERENCE
  object `lastLine` last assigned on line 184 could be null and is dereferenced at line 185.
  183.           if (current < length) {
  184.               TextLine lastLine = result.getLastLine();
  185. >             TextFragment lastFragment = lastLine.getLastTextFragment();
  186.               String oldStr = lastFragment.getText();
  187.               String newStr = "...";

src/main/java/org/jfree/chart/urls/CustomPieURLGenerator.java:186: error: NULL_DEREFERENCE
  object returned by `getURL(key,pieItem)` could be null and is dereferenced at line 186.
  184.                   for (Iterator i = keySet.iterator(); i.hasNext();) {
  185.                   key = (String) i.next();
  186. >                     if (!getURL(key, pieItem).equals(
  187.                               generator.getURL(key, pieItem))) {
  188.                           return false;

src/main/java/org/jfree/chart/plot/CombinedRangeCategoryPlot.java:177: error: NULL_DEREFERENCE
  object `null` could be null and is dereferenced by call to `setRangeAxis(...)` at line 177.
  175.           subplot.setWeight(weight);
  176.           subplot.setInsets(new RectangleInsets(0.0, 0.0, 0.0, 0.0));
  177. >         subplot.setRangeAxis(null);
  178.           subplot.setOrientation(getOrientation());
  179.           subplot.addChangeListener(this);

src/main/java/org/jfree/chart/plot/CombinedDomainCategoryPlot.java:183: error: NULL_DEREFERENCE
  object `null` could be null and is dereferenced by call to `setDomainAxis(...)` at line 183.
  181.           subplot.setWeight(weight);
  182.           subplot.setInsets(new RectangleInsets(0.0, 0.0, 0.0, 0.0));
  183. >         subplot.setDomainAxis(null);
  184.           subplot.setOrientation(getOrientation());
  185.           subplot.addChangeListener(this);

src/main/java/org/jfree/data/DefaultKeyedValue.java:177: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.DefaultKeyedValue.toString` reads without synchronization from `&this.org.jfree.data.DefaultKeyedValue.value`. Potentially races with writes in method `void DefaultKeyedValue.setValue(Number)`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  175.       @Override
  176.       public String toString() {
  177. >         return "(" + this.key.toString() + ", " + this.value.toString() + ")";
  178.       }
  179.   

src/main/java/org/jfree/chart/PolarChartPanel.java:214: error: NULL_DEREFERENCE
  object returned by `plot.getAxis()` could be null and is dereferenced at line 214.
  212.          else if (command.equals(POLAR_AUTO_RANGE_ACTION_COMMAND)) {
  213.              PolarPlot plot = (PolarPlot) getChart().getPlot();
  214. >            plot.getAxis().setAutoRange(true);
  215.          }
  216.          else {

src/main/java/org/jfree/chart/text/TextBox.java:276: error: NULL_DEREFERENCE
  object `bounds` last assigned on line 275 could be null and is dereferenced at line 276.
  274.           final Rectangle2D bounds
  275.                   = RectangleAnchor.createRectangle(d2, x, y, anchor);
  276. >         double xx = bounds.getX();
  277.           double yy = bounds.getY();
  278.   

src/main/java/org/jfree/chart/panel/CrosshairOverlay.java:300: error: NULL_DEREFERENCE
  object `hotspot` last assigned on line 298 could be null and is dereferenced at line 300.
  298.                   Shape hotspot = TextUtils.calculateRotatedStringBounds(
  299.                           label, g2, xx, yy, alignPt, 0.0, TextAnchor.CENTER);
  300. >                 if (!dataArea.contains(hotspot.getBounds2D())) {
  301.                       anchor = flipAnchorV(anchor);
  302.                       pt = calculateLabelPoint(line, anchor, 5, 5);

src/main/java/org/jfree/chart/plot/dial/DialPointer.java:314: error: NULL_DEREFERENCE
  object `scale` last assigned on line 313 could be null and is dereferenced at line 314.
  312.               double value = plot.getValue(this.datasetIndex);
  313.               DialScale scale = plot.getScaleForDataset(this.datasetIndex);
  314. >             double angle = scale.valueToAngle(value);
  315.   
  316.               Arc2D arc = new Arc2D.Double(arcRect, angle, 0, Arc2D.OPEN);

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:334: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.findDomainLimits` indirectly reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.pointsInTime.[_]`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  332.        */
  333.       protected void findDomainLimits() {
  334. >         long startL = getOldestTime().getFirstMillisecond(this.workingCalendar);
  335.           long endL;
  336.           if (this.domainIsPointsInTime) {

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:343: error: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.findDomainLimits` writes to field `&this.org.jfree.data.time.DynamicTimeSeriesCollection.domainEnd` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  341.           }
  342.           this.domainStart = new Long(startL);
  343. >         this.domainEnd = new Long(endL);
  344.           this.domainRange = new Range(startL, endL);
  345.       }

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:344: error: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.findDomainLimits` writes to field `&this.org.jfree.data.time.DynamicTimeSeriesCollection.domainRange` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  342.           this.domainStart = new Long(startL);
  343.           this.domainEnd = new Long(endL);
  344. >         this.domainRange = new Range(startL, endL);
  345.       }
  346.   

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:342: error: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.findDomainLimits` writes to field `&this.org.jfree.data.time.DynamicTimeSeriesCollection.domainStart` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  340.               endL = getNewestTime().getLastMillisecond(this.workingCalendar);
  341.           }
  342. >         this.domainStart = new Long(startL);
  343.           this.domainEnd = new Long(endL);
  344.           this.domainRange = new Range(startL, endL);

src/main/java/org/jfree/chart/panel/CrosshairOverlay.java:357: error: NULL_DEREFERENCE
  object `hotspot` last assigned on line 355 could be null and is dereferenced at line 357.
  355.                   Shape hotspot = TextUtils.calculateRotatedStringBounds(
  356.                           label, g2, xx, yy, alignPt, 0.0, TextAnchor.CENTER);
  357. >                 if (!dataArea.contains(hotspot.getBounds2D())) {
  358.                       anchor = flipAnchorH(anchor);
  359.                       pt = calculateLabelPoint(line, anchor, 5, 5);

src/main/java/org/jfree/chart/servlet/ServletUtilities.java:401: error: RESOURCE_LEAK
  resource of type `java.io.BufferedInputStream` acquired to `bis` by call to `new()` at line 367 is not released after line 401.
**Note**: potential exception at line 386
  399.               throw new FileNotFoundException(file.getAbsolutePath());
  400.           }
  401. >     }
  402.   
  403.       /**

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:411: error: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.addSeries` indirectly writes to field `&this.org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence.dataPoints.[_]` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  409.           if (fillNeeded) {
  410.               for (i = copyLength; i < this.historyCount; i++) {
  411. >                 this.valueHistory[seriesNumber].enterData(i, 0.0f);
  412.               }
  413.           }

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:379: error: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.addSeries` indirectly writes to field `&this.org.jfree.data.time.DynamicTimeSeriesCollection.maxValue` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  377.               Comparable seriesKey) {
  378.   
  379. >         invalidateRangeInfo();
  380.           int i;
  381.           if (values == null) {

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:454: error: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.addValue` indirectly writes to field `&this.org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence.dataPoints.[_]` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  452.           //synchronized(this)
  453.           //{
  454. >             this.valueHistory[seriesNumber].enterData(index, value);
  455.           //}
  456.           fireSeriesChanged();

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:439: error: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.addValue` indirectly writes to field `&this.org.jfree.data.time.DynamicTimeSeriesCollection.maxValue` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  437.        */
  438.       public void addValue(int seriesNumber, int index, float value) {
  439. >         invalidateRangeInfo();
  440.           if (seriesNumber >= this.valueHistory.length) {
  441.               throw new IllegalArgumentException(

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:498: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.translateGet` reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.oldestAt`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  496.           }
  497.           // else  [implicit here]
  498. >         int newIndex = toFetch + this.oldestAt;
  499.           if (newIndex >= this.historyCount) {
  500.               newIndex -= this.historyCount;

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:513: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.offsetFromNewest` reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.newestAt`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  511.        */
  512.       public int offsetFromNewest(int delta) {
  513. >         return wrapOffset(this.newestAt + delta);
  514.       }
  515.   

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:524: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.offsetFromOldest` reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.oldestAt`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  522.        */
  523.       public int offsetFromOldest(int delta) {
  524. >         return wrapOffset(this.oldestAt + delta);
  525.       }
  526.   

src/main/java/org/jfree/chart/plot/dial/DialPointer.java:540: error: NULL_DEREFERENCE
  object `scale` last assigned on line 539 could be null and is dereferenced at line 540.
  538.               double value = plot.getValue(this.datasetIndex);
  539.               DialScale scale = plot.getScaleForDataset(this.datasetIndex);
  540. >             double angle = scale.valueToAngle(value);
  541.   
  542.               Arc2D arc1 = new Arc2D.Double(lengthRect, angle, 0, Arc2D.OPEN);

src/main/java/org/jfree/chart/renderer/DefaultPolarItemRenderer.java:610: error: NULL_DEREFERENCE
  object `axis` last assigned on line 608 could be null and is dereferenced at line 610.
  608.           ValueAxis axis = plot.getAxis();
  609.           double centerValue, outerValue;
  610. >         if (axis.isInverted()) {
  611.               outerValue = axis.getLowerBound();
  612.               centerValue = axis.getUpperBound();

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:605: error: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.invalidateRangeInfo` writes to field `&this.org.jfree.data.time.DynamicTimeSeriesCollection.maxValue` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  603.        */
  604.       public void invalidateRangeInfo() {
  605. >         this.maxValue = null;
  606.           this.valueRange = null;
  607.       }

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:606: error: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.invalidateRangeInfo` writes to field `&this.org.jfree.data.time.DynamicTimeSeriesCollection.valueRange` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  604.       public void invalidateRangeInfo() {
  605.           this.maxValue = null;
  606. >         this.valueRange = null;
  607.       }
  608.   

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:618: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.findMaxValue` indirectly reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.oldestAt`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  616.           for (int s = 0; s < getSeriesCount(); s++) {
  617.               for (int i = 0; i < this.historyCount; i++) {
  618. >                 double tmp = getYValue(s, i);
  619.                   if (tmp > max) {
  620.                       max = tmp;

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:635: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getOldestIndex` reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.oldestAt`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  633.        */
  634.       public int getOldestIndex() {
  635. >         return this.oldestAt;
  636.       }
  637.   

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:644: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getNewestIndex` reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.newestAt`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  642.        */
  643.       public int getNewestIndex() {
  644. >         return this.newestAt;
  645.       }
  646.   

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:667: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.appendData` reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.newestAt`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  665.                   this.valueHistory[s] = new ValueSequence(this.historyCount);
  666.               }
  667. >             this.valueHistory[s].enterData(this.newestAt, newData[s]);
  668.           }
  669.           fireSeriesChanged();

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:667: error: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.appendData` indirectly writes to field `&this.org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence.dataPoints.[_]` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  665.                   this.valueHistory[s] = new ValueSequence(this.historyCount);
  666.               }
  667. >             this.valueHistory[s].enterData(this.newestAt, newData[s]);
  668.           }
  669.           fireSeriesChanged();

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:690: error: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.appendData` indirectly writes to field `&this.org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence.dataPoints.[_]` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  688.                   this.valueHistory[s] = new ValueSequence(this.historyCount);
  689.               }
  690. >             this.valueHistory[s].enterData(insertionIndex, newData[s]);
  691.           }
  692.           if (refresh > 0) {

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:706: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getNewestTime` reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.pointsInTime.[_]`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  704.        */
  705.       public RegularTimePeriod getNewestTime() {
  706. >         return this.pointsInTime[this.newestAt];
  707.       }
  708.   

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:715: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getOldestTime` reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.pointsInTime.[_]`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  713.        */
  714.       public RegularTimePeriod getOldestTime() {
  715. >         return this.pointsInTime[this.oldestAt];
  716.       }
  717.   

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:730: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getX` indirectly reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.oldestAt`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  728.       @Override
  729.       public Number getX(int series, int item) {
  730. >         RegularTimePeriod tp = this.pointsInTime[translateGet(item)];
  731.           return new Long(getX(tp));
  732.       }

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:730: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getX` reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.pointsInTime.[_]`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  728.       @Override
  729.       public Number getX(int series, int item) {
  730. >         RegularTimePeriod tp = this.pointsInTime[translateGet(item)];
  731.           return new Long(getX(tp));
  732.       }

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:747: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getYValue` indirectly reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.oldestAt`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  745.           // Instead, synchronize the loop that calls it.
  746.           ValueSequence values = this.valueHistory[series];
  747. >         return values.getData(translateGet(item));
  748.       }
  749.   

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:760: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getY` indirectly reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.oldestAt`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  758.       @Override
  759.       public Number getY(int series, int item) {
  760. >         return new Float(getYValue(series, item));
  761.       }
  762.   

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:773: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getStartX` indirectly reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.oldestAt`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  771.       @Override
  772.       public Number getStartX(int series, int item) {
  773. >         RegularTimePeriod tp = this.pointsInTime[translateGet(item)];
  774.           return new Long(tp.getFirstMillisecond(this.workingCalendar));
  775.       }

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:773: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getStartX` reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.pointsInTime.[_]`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  771.       @Override
  772.       public Number getStartX(int series, int item) {
  773. >         RegularTimePeriod tp = this.pointsInTime[translateGet(item)];
  774.           return new Long(tp.getFirstMillisecond(this.workingCalendar));
  775.       }

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:787: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getEndX` indirectly reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.oldestAt`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  785.       @Override
  786.       public Number getEndX(int series, int item) {
  787. >         RegularTimePeriod tp = this.pointsInTime[translateGet(item)];
  788.           return new Long(tp.getLastMillisecond(this.workingCalendar));
  789.       }

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:787: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getEndX` reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.pointsInTime.[_]`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  785.       @Override
  786.       public Number getEndX(int series, int item) {
  787. >         RegularTimePeriod tp = this.pointsInTime[translateGet(item)];
  788.           return new Long(tp.getLastMillisecond(this.workingCalendar));
  789.       }

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:801: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getStartY` indirectly reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.oldestAt`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  799.       @Override
  800.       public Number getStartY(int series, int item) {
  801. >         return getY(series, item);
  802.       }
  803.   

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:814: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getEndY` indirectly reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.oldestAt`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  812.       @Override
  813.       public Number getEndY(int series, int item) {
  814. >         return getY(series, item);
  815.       }
  816.   

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:862: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getDomainLowerBound` reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.domainStart`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  860.       @Override
  861.       public double getDomainLowerBound(boolean includeInterval) {
  862. >         return this.domainStart.doubleValue();
  863.           // a Long kept updated by advanceTime()
  864.       }

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:876: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getDomainUpperBound` reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.domainEnd`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  874.       @Override
  875.       public double getDomainUpperBound(boolean includeInterval) {
  876. >         return this.domainEnd.doubleValue();
  877.           // a Long kept updated by advanceTime()
  878.       }

src/main/java/org/jfree/chart/axis/DateAxis.java:1016: error: NULL_DEREFERENCE
  object `standardDate` last assigned on line 1014 could be null and is dereferenced at line 1016.
  1014.               Date standardDate = calculateDateForPosition(
  1015.                       month, this.tickMarkPosition);
  1016. >             long millis = standardDate.getTime();
  1017.               if (millis >= date.getTime()) {
  1018.                   for (int i = 0; i < count; i++) {

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:893: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getDomainBounds` reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.domainRange`. Potentially races with writes in methods `{ RegularTimePeriod DynamicTimeSeriesCollection.advanceTime(),
                                            long DynamicTimeSeriesCollection.setTimeBase(RegularTimePeriod) }`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  891.               findDomainLimits();
  892.           }
  893. >         return this.domainRange;
  894.       }
  895.   

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:891: error: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getDomainBounds` indirectly writes to field `&this.org.jfree.data.time.DynamicTimeSeriesCollection.domainEnd` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  889.       public Range getDomainBounds(boolean includeInterval) {
  890.           if (this.domainRange == null) {
  891. >             findDomainLimits();
  892.           }
  893.           return this.domainRange;

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:951: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getRangeUpperBound` reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.maxValue`. Potentially races with writes in method `RegularTimePeriod DynamicTimeSeriesCollection.advanceTime()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  949.           double result = Double.NaN;
  950.           if (this.maxValue != null) {
  951. >             result = this.maxValue.doubleValue();
  952.           }
  953.           return result;

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:967: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getRangeBounds` indirectly reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.maxValue`. Potentially races with writes in method `RegularTimePeriod DynamicTimeSeriesCollection.advanceTime()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  965.       public Range getRangeBounds(boolean includeInterval) {
  966.           if (this.valueRange == null) {
  967. >             double max = getRangeUpperBound(includeInterval);
  968.               this.valueRange = new Range(0.0, max);
  969.           }

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:970: error: THREAD_SAFETY_VIOLATION
  Read/Write race. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getRangeBounds` reads without synchronization from `&this.org.jfree.data.time.DynamicTimeSeriesCollection.valueRange`. Potentially races with writes in method `RegularTimePeriod DynamicTimeSeriesCollection.advanceTime()`.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  968.               this.valueRange = new Range(0.0, max);
  969.           }
  970. >         return this.valueRange;
  971.       }
  972.   

src/main/java/org/jfree/data/time/DynamicTimeSeriesCollection.java:968: error: THREAD_SAFETY_VIOLATION
  Unprotected write. Non-private method `org.jfree.data.time.DynamicTimeSeriesCollection.getRangeBounds` writes to field `&this.org.jfree.data.time.DynamicTimeSeriesCollection.valueRange` outside of synchronization.
 Reporting because another access to the same memory occurs on a background thread, although this access may not.
  966.           if (this.valueRange == null) {
  967.               double max = getRangeUpperBound(includeInterval);
  968. >             this.valueRange = new Range(0.0, max);
  969.           }
  970.           return this.valueRange;

src/main/java/org/jfree/chart/renderer/xy/XYBarRenderer.java:1024: error: NULL_DEREFERENCE
  object `anchorPoint` last assigned on line 995 could be null and is dereferenced at line 1024.
  1022.           if (position != null) {
  1023.               TextUtils.drawRotatedString(label, g2,
  1024. >                     (float) anchorPoint.getX(), (float) anchorPoint.getY(),
  1025.                       position.getTextAnchor(), position.getAngle(),
  1026.                       position.getRotationAnchor());

src/main/java/org/jfree/chart/axis/CategoryAxis.java:1072: error: NULL_DEREFERENCE
  object `position` last assigned on line 1033 could be null and is dereferenced at line 1072.
  1070.               Rectangle2D area = new Rectangle2D.Double(x0, y0, (x1 - x0),
  1071.                       (y1 - y0));
  1072. >             Point2D anchorPoint = position.getCategoryAnchor().getAnchorPoint(area);
  1073.               TextBlock block = tick.getLabel();
  1074.               block.draw(g2, (float) anchorPoint.getX(),

src/main/java/org/jfree/chart/axis/CategoryAxis.java:1149: error: NULL_DEREFERENCE
  object `position` last assigned on line 1142 could be null and is dereferenced at line 1149.
  1147.   
  1148.               float l;
  1149. >             if (position.getWidthType() == CategoryLabelWidthType.CATEGORY) {
  1150.                   l = (float) calculateCategorySize(categories.size(), dataArea,
  1151.                           edge);

src/main/java/org/jfree/chart/renderer/category/BarRenderer.java:1187: error: NULL_DEREFERENCE
  object `anchorPoint` last assigned on line 1158 could be null and is dereferenced at line 1187.
  1185.           if (position != null) {
  1186.               TextUtils.drawRotatedString(label, g2,
  1187. >                     (float) anchorPoint.getX(), (float) anchorPoint.getY(),
  1188.                       position.getTextAnchor(), position.getAngle(),
  1189.                       position.getRotationAnchor());

src/main/java/org/jfree/chart/plot/PolarPlot.java:1421: error: NULL_DEREFERENCE
  object `state` last assigned on line 1399 could be null and is dereferenced at line 1421.
  1419.                   getForegroundAlpha()));
  1420.           this.angleTicks = refreshAngleTicks();
  1421. >         drawGridlines(g2, dataArea, this.angleTicks, state.getTicks());
  1422.           render(g2, dataArea, info);
  1423.           g2.setClip(originalClip);

src/main/java/org/jfree/chart/axis/DateAxis.java:1579: error: NULL_DEREFERENCE
  object `tickDate` last assigned on line 1575 could be null and is dereferenced at line 1579.
  1577.               }
  1578.   
  1579. >             long lowestTickTime = tickDate.getTime();
  1580.               long distance = unit.addToDate(tickDate, this.timeZone).getTime()
  1581.                       - lowestTickTime;

src/main/java/org/jfree/chart/axis/DateAxis.java:1697: error: NULL_DEREFERENCE
  object `tickDate` last assigned on line 1693 could be null and is dereferenced at line 1697.
  1695.               }
  1696.   
  1697. >             long lowestTickTime = tickDate.getTime();
  1698.               long distance = unit.addToDate(tickDate, this.timeZone).getTime()
  1699.                       - lowestTickTime;

Summary of the reports

  THREAD_SAFETY_VIOLATION: 43
         NULL_DEREFERENCE: 22
            RESOURCE_LEAK: 4